#!/bin/bash

###################################################################################
#----------Flag and argument processing-------------------------------------------#
###################################################################################

#----------Cheking flags' operand and setting the related variable for each--------
method=
while getopts 'hM:' OPTION
do
    case $OPTION in
#    a)
#       aflag=1
#       ;;
    M)
        if [ $OPTARG == "not-raw"  ] || [ $OPTARG == "raw" ]
        then
            method="$OPTARG"
        else
            echo "$(basename $0): Invalid operand for -M, select operand from [not-raw|raw]"
            exit 1
        fi
        ;;
    h)
        printf "Usage: %s [OPTION]... [DIRECTORY] \n" $(basename $0) >&2
        echo "Gathers different sensors' data by using redfishtool command from specified cluster"
        echo
        echo "list of OPTIONs: "
        echo "-h" $'\t\t\t' "Show this help"
        echo "-M [not-raw|raw]" $'\t' "Specify the type of queries that redfishtool command will use to gather sensors' data"
        echo
        exit 1
        ;;
    ?)
        echo
        printf "Usage: %s [OPTION]... [DIRECTORY] \n" $(basename $0) >&2
        echo "Gathers different sensors' data by using redfishtool command from specified cluster"
        printf "Use %s -h for help \n" $(basename $0) >&2
        echo
        exit 1
    ;;
    esac
done

if [ -z $method ]
then
    echo "Option -M [not-raw|raw] is required"
    echo
    printf "Usage: %s [OPTION].. [DIRECTORY]\n" $(basename $0)
    echo "Gathers different sensors' data by using redfishtool command from specified cluster"
    printf "Use %s -h for help \n" $(basename $0) >&2
    echo
    exit 1
fi


#----------Setting the results' directory pathi from the command argument----------
shift $(expr $OPTIND - 1)                                                                                                      

if [ "$*" ]
then
    resultsPath="$*/$method"
else
    resultsPath="../results/collected/$method"
fi

##################################################################################
#---------Making reqired directories and other primarily settings----------------#
##################################################################################

#---------Adding $resultPath directory in the results----------------------------------
if [ ! -d $resultsPath ]
then
    mkdir -p $resultsPath 
    if [ $? == 0 ]
    then
        echo "$resultsPath directory created successfully!"
    else
        exit 2
    fi
fi
echo

#----------Name of the results' directory for the current run----------------------
#----------Used the current date and time to make it unique------------------------
date=`date +%F`
hour=`date +%H`
minute=`date +%M`
second=`date +%S`
runTime=$date-$hour-$minute-$second



###################################################################################
#----------Extracting the subcommands and their tags from the config file---------# 
###################################################################################

#----------Finding number of tags for the upcoming tests---------------------------
tagNumber=$(cat ../config/redfish-subcommands-$method.conf | sed -n -e '/---/,$p' | grep -v '^ *$'  | wc -l)

for i in `seq 2 $tagNumber`
do
    tagName=`cat ../config/redfish-subcommands-$method.conf | sed -n -e '/---/,$p' | awk '{print $1}' | head -n +$i | tail -1`
    subCommand=`cat ../config/redfish-subcommands-$method.conf | sed -n -e '/---/,$p' | tr -s $'\t' | awk -F $'\t' '{print $2}' | head -n +$i | tail -1`

#----------Creating tagName and runTime directory to save monitoring results-------
    tagNameCapital=`echo $tagName | tr [a-z] [A-Z]`
    echo "************************************************ $tagNameCapital ************************************************"
    mkdir -p $resultsPath/$runTime/$tagName

#----------Creating rackID directory to save monitoring results--------------------
    for rack in  `cat ../config/cluster.conf | sed -e '1,/--/d' | awk '{print $1}' | grep -v '^ *$' | uniq`
    do
        mkdir $resultsPath/$runTime/$tagName/$rack
    done
    
    echo "$resultsPath/$runTime/$tagName and all racks subdirectory created successfully!"
    echo "*******************************************************************************************************"

####################################################################################
##----------Gathering data for each tag from all cluster nodes----------------------
####################################################################################
    for node in `cat ../config/cluster.conf | sed -e '1,/--/d' | awk '{print $3}' | grep -v '^ *$'`
    do
        rackID=`cat ../config/cluster.conf | grep -w $node | awk -F$'\t' '{print $1}'`
        nodeID=`cat ../config/cluster.conf | grep -w $node | awk -F$'\t' '{print $2}'`
        if [ $method == "not-raw" ]
        then
            (time python3.4 ../tools/Redfishtool/redfishtool.py -r $node -SAlways -u root -p calvin -ssss -vvv $subCommand) &> $resultsPath/$runTime/$tagName/$rackID/$rackID-$nodeID && echo "$rackID-$nodeID responce saved" &
        elif [ $method == "raw" ]
        then
	    (time python3.4 ../tools/Redfishtool/redfishtool.py -r $node -SAlways -u root -p calvin -ssss -vvv raw GET https://$node/$subCommand) &> $resultsPath/$runTime/$tagName/$rackID/$rackID-$nodeID && echo "$rackID-$nodeID responce saved" &
        else
            echo "Ooops! something went wrong"
        fi
    done
    wait

    echo
    echo
done
